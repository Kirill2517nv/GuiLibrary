#include "gui_library.h"
#include <cmath>

int main() {
    // ===========================================
    // ШАГ 1: Инициализация библиотеки
    // ===========================================
    if (!init_gui_library("Мой первый проект")) {
        return -1;
    }

    // ===========================================
    // ШАГ 2: Добавляем параметры для настройки
    // ===========================================
    
    // Параметр "a" для формулы y = a * x^2
    add_float_param("a", "Коэффициент a", 1.0f, -5.0f, 5.0f, 0.1f);
    
    // Параметр "b" для формулы y = a * x^2 + b
    add_float_param("b", "Коэффициент b", 0.0f, -10.0f, 10.0f, 0.1f);
    
    // Количество точек на графике
    add_int_param("points", "Количество точек", 50, 10, 200, 5);
    
    // Диапазон по оси X
    add_float_param("x_min", "X минимум", -5.0f, -10.0f, 0.0f, 0.5f);
    add_float_param("x_max", "X максимум", 5.0f, 0.0f, 10.0f, 0.5f);

    // ===========================================
    // ШАГ 3: Создаем график
    // ===========================================
    create_plot("Мой график", "Квадратичная функция");

    // ===========================================
    // ШАГ 4: Пишем функцию расчета (лямбда-функция)
    // ===========================================
    auto my_calculation = []() {
        // Получаем значения параметров
        float a = get_float_param("a");
        float b = get_float_param("b");
        int points = get_int_param("points");
        float x_min = get_float_param("x_min");
        float x_max = get_float_param("x_max");

        // Создаем массивы для хранения данных
        std::vector<float> x_values(points);
        std::vector<float> y_values(points);

        // Заполняем данные по формуле y = a * x^2 + b
        for (int i = 0; i < points; ++i) {
            // Вычисляем x от x_min до x_max
            float x = x_min + (x_max - x_min) * i / (points - 1);
            x_values[i] = x;
            
            // ВАША ФОРМУЛА ЗДЕСЬ!
            // Измените эту строку для своей функции
            y_values[i] = a * x * x + b;
            
            // Примеры других функций:
            // y_values[i] = a * sin(x) + b;           // Синус
            // y_values[i] = a * exp(-x*x) + b;        // Гаусс
            // y_values[i] = a * x * x * x + b;        // Кубическая
            // y_values[i] = a * 1.0f / (1.0f + x*x) + b; // Рациональная
        }

        // Обновляем график
        clear_plot("Мой график");
        add_plot_data("Мой график", x_values, y_values, "y = ax² + b");
    };

    // ===========================================
    // ШАГ 5: Устанавливаем функцию расчета
    // ===========================================
    set_calculation_function(my_calculation);

    // ===========================================
    // ШАГ 6: Основной цикл программы
    // ===========================================
    while (gui_main_loop()) {
        // Функция расчета вызывается автоматически
        // Здесь можно добавить задержку для анимации
        sleep_ms(16); // ~60 кадров в секунду
    }

    // ===========================================
    // ШАГ 7: Завершение работы
    // ===========================================
    shutdown_gui_library();
    return 0;
}

/*
ЗАДАНИЯ ДЛЯ ШКОЛЬНИКОВ:

1. ИЗМЕНИТЕ ФОРМУЛУ:
   Замените строку y_values[i] = a * x * x + b; на свою формулу
   
   Примеры:
   - y_values[i] = a * sin(x) + b;           // Синусоида
   - y_values[i] = a * cos(x) + b;           // Косинусоида
   - y_values[i] = a * exp(-x*x) + b;        // Гауссова функция
   - y_values[i] = a * x * x * x + b;        // Кубическая функция
   - y_values[i] = a * 1.0f / (1.0f + x*x) + b; // Рациональная функция

2. ДОБАВЬТЕ НОВЫЙ ПАРАМЕТР:
   Добавьте новый параметр с помощью add_float_param() и используйте его в формуле

3. СОЗДАЙТЕ ВТОРОЙ ГРАФИК:
   - Создайте новый график: create_plot("График 2", "Второй график");
   - Добавьте данные: add_plot_data("График 2", x_values, y_values2, "Функция 2");

4. СДЕЛАЙТЕ АНИМАЦИЮ:
   Используйте get_time() для создания движущихся графиков
*/
